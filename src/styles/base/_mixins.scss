@use "../tokens/grid";
@use "functions";

@use "sass:map";
@use "sass:list";

@mixin media-min($breakpoint) {
  @if map.has-key(grid.$breakpoints, $breakpoint) {
    $breakpoint-value: map.get(grid.$breakpoints, $breakpoint);
    @media (min-width: $breakpoint-value) {
      @content;
    }
  } @else {
    @warn 'Invalid breakpoint: #{$breakpoint} in `media-min`.';
  }
}

@mixin media-max($breakpoint) {
  @if map.has-key(grid.$breakpoints, $breakpoint) {
    $breakpoint-value: map.get(grid.$breakpoints, $breakpoint);
    @media (max-width: $breakpoint-value) {
      @content;
    }
  } @else {
    @warn 'Invalid breakpoint: #{$breakpoint-value} in `media-max`.';
  }
}

@mixin media-max-height($breakpoint) {
  @if map.has-key(grid.$breakpoints, $breakpoint) {
    $breakpoint-value: map.get(grid.$breakpoints, $breakpoint);
    @media (max-height: $breakpoint-value) {
      @content;
    }
  } @else {
    @warn 'Invalid breakpoint: #{$breakpoint} in `media-min`.';
  }
}

@mixin media-between($lower, $upper) {
  @if map.has-key(grid.$breakpoints, $lower) and
    map.has-key(grid.$breakpoints, $upper)
  {
    $lower-breakpoint: map.get(grid.$breakpoints, $lower);
    $upper-breakpoint: map.get(grid.$breakpoints, $upper);

    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
      @content;
    }
  } @else {
    @if (map.has-key(grid.$breakpoints, $lower) == false) {
      @warn 'Your lower breakpoint was invalid: #{$lower}.';
    }

    @if (map.has-key(grid.$breakpoints, $upper) == false) {
      @warn 'Your upper breakpoint was invalid: #{$upper}.';
    }
  }
}

/// Creates grid column classes without a prefix
/// divided by the total number of colums in the grid.
/// 12 (total columns) / 6 ($index) => 50%
///
/// @param {Number} $index - The current index in the loop
/// @param {Number} $max-col-size - Total amount of columns in the grid
///
/// @example scss - SCSS usage
///
/// @for $loop-index from 1 through grid.$grid-column-count-xl {
///   @include mixins.generate-grid-colums($loop-index, grid.$grid-column-count-xl);
/// }
///
/// @example css - CSS output
///
/// .col-1 {
///  max-width: calc(8.3333333333% - 1rem);
///  flex-basis: calc(8.3333333333% - 1rem);
/// }
///
/// .col-2 {
///   max-width: calc(16.6666666667% - 1rem);
///   flex-basis: calc(16.6666666667% - 1rem);
/// }
@mixin generate-grid-colums(
  $index: 1,
  $max-col-size: grid.$grid-column-count-xl
) {
  .col-#{$index} {
    max-width: calc(
      #{functions.get-grid-col-percentage-width($index, $max-col-size)} - #{grid.$grid-gutter-s}
    );

    flex-basis: calc(
      #{functions.get-grid-col-percentage-width($index, $max-col-size)} - #{grid.$grid-gutter-s}
    );
  }
  @include media-min(grid.$grid-gutter-breakpoint-change) {
    .col-#{$index} {
      max-width: calc(
        #{functions.get-grid-col-percentage-width($index, $max-col-size)} - #{grid.$grid-gutter-m}
      );

      flex-basis: calc(
        #{functions.get-grid-col-percentage-width($index, $max-col-size)} - #{grid.$grid-gutter-m}
      );
    }
  }
}

/// Creates grid column classes with a responsive prefix
/// divided by the total number of colums in the grid.
/// 12 (total columns) / 6 ($index) => 50%
///
/// @param {Number} $index - The current index in the loop
/// @param {Number} $max-col-size - Total amount of columns in the grid
/// @param {String} $breakpoint - The breakpoint to include in the class name
///
/// @example scss - SCSS usage
///
/// @for $loop-index from 1 through grid.$grid-column-count-m {
///   @include mixins.generate-grid-colums-with-prefix(
///     $loop-index,
///     grid.$grid-column-count-m,
///     m
///   );
/// }
///
/// @example css - CSS output
///
/// @media (min-width: 35rem) {
///   .col-m-6 {
///     max-width: calc( 75% - 1.5rem );
///     flex-basis: calc( 75% - 1.5rem );
///   }
/// }
///
/// @example scss - SCSS usage
///
/// @for $loop-index from 1 through grid.$grid-column-count-xl {
///   @include mixins.generate-grid-colums-with-prefix(
///     $loop-index,
///     grid.$grid-column-count-xl,
///     l
///   );
/// }
///
/// @example css - CSS output
///
/// @media (min-width: 42.5rem) {
///   .col-l-1 {
///     max-width: calc( 8.3333333333% - 1rem );
///     flex-basis: calc( 8.3333333333% - 1rem );
///   }
/// }
@mixin generate-grid-colums-with-prefix(
  $index: 1,
  $max-col-size: grid.$grid-column-count-xl,
  $breakpoint: null
) {
  @if ($breakpoint) {
    @if (map.has-key(grid.$breakpoints, $breakpoint)) {
      $breakpoint-keys: map.keys(grid.$breakpoints);
      $current-breakpoint-index: list.index(grid.$breakpoint-keys, $breakpoint);

      @include media-min($breakpoint) {
        @if ($current-breakpoint-index < grid.$large-gutters-breakpoint-index) {
          .col-#{$breakpoint}-#{$index} {
            max-width: calc(
              #{functions.get-grid-col-percentage-width(
                  $index,
                  $max-col-size
                )} -
                #{grid.$grid-gutter-s}
            );

            flex-basis: calc(
              #{functions.get-grid-col-percentage-width(
                  $index,
                  $max-col-size
                )} -
                #{grid.$grid-gutter-s}
            );
          }
        } @else {
          .col-#{$breakpoint}-#{$index} {
            max-width: calc(
              #{functions.get-grid-col-percentage-width(
                  $index,
                  $max-col-size
                )} -
                #{grid.$grid-gutter-m}
            );

            flex-basis: calc(
              #{functions.get-grid-col-percentage-width(
                  $index,
                  $max-col-size
                )} -
                #{grid.$grid-gutter-m}
            );
          }
        }
      }
    } @else {
      @warn ("Invalid breakpoint: #{$breakpoint} in `generate-grid-colums`.");
    }
  } @else {
    @warn ("No breakpoint was provided to `generate-grid-colums`.");
  }
}

@mixin fade-in-nav-buttons($distance: 4) {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}
